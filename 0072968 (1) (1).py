{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "32e4e765",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import simpy as sp\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2da1a143",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_job():\n",
    "    rand  = np.random.rand()\n",
    "    if rand < 0.40:\n",
    "        return 1\n",
    "    elif rand < 0.70:\n",
    "        return 2\n",
    "    elif rand < 0.90:\n",
    "        return 3\n",
    "    elif rand < 1.00:\n",
    "        return 4\n",
    "    \n",
    "class MonitoredResource(sp.Resource):\n",
    "    def _init_(self, *args, **kwargs):\n",
    "        super()._init_(*args, **kwargs)\n",
    "        self.data = []\n",
    "\n",
    "    def request(self, *args, **kwargs):\n",
    "        if self.count == self.capacity:\n",
    "            self.data.append((self._env.now, self.count))\n",
    "        else:\n",
    "            self.data.append((self._env.now, self.count + 1))\n",
    "                    \n",
    "        return super().request(*args, **kwargs)\n",
    "\n",
    "    def release(self, *args, **kwargs):\n",
    "        if len(self.queue) == 0:\n",
    "            self.data.append((self._env.now, self.count - 1))\n",
    "        else:\n",
    "            self.data.append((self._env.now, self.count))\n",
    "            \n",
    "        return super().release(*args, **kwargs)\n",
    "\n",
    "def initilization(env):\n",
    "    global st1\n",
    "    global st2\n",
    "    global st3\n",
    "    global st4\n",
    "    global response1\n",
    "    global response2\n",
    "    global response3\n",
    "    global response4\n",
    "    \n",
    "    yield env.timeout(200)\n",
    "    \n",
    "    del st1.data[:len(st1.data)-1]\n",
    "    st1.data[0] = (200, st1.data[0][1])\n",
    "    del st2.data[:len(st2.data)-1]\n",
    "    st2.data[0] = (200, st2.data[0][1])\n",
    "    del st3.data[:len(st3.data)-1]\n",
    "    st3.data[0] = (200, st3.data[0][1])\n",
    "    del st4.data[:len(st4.data)-1]\n",
    "    st4.data[0] = (200, st4.data[0][1]) \n",
    "    response1.clear()\n",
    "    response2.clear()\n",
    "    response3.clear()\n",
    "    response4.clear()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "081a90ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "def job_process(env):\n",
    "    global st1\n",
    "    global st2\n",
    "    global st3\n",
    "    global st4\n",
    "    global response1\n",
    "    global response2\n",
    "    global response3\n",
    "    global response4\n",
    "    \n",
    "    job_type = generate_job()\n",
    "    if job_type == 1:\n",
    "        #-------------------------------\n",
    "        req = st1.request()\n",
    "        arrive = env.now\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(20, 3))\n",
    "        st1.release(req)\n",
    "        #-------------------------------\n",
    "        req = st2.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(30, 5))\n",
    "        st2.release(req)\n",
    "        #-------------------------------\n",
    "        req = st3.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(75, 4))\n",
    "        st3.release(req)\n",
    "        #-------------------------------\n",
    "        req = st4.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(20, 3))\n",
    "        response1.append(env.now - arrive)\n",
    "        st4.release(req)\n",
    "        #-------------------------------\n",
    "        \n",
    "    elif job_type == 2:\n",
    "        #-------------------------------\n",
    "        req = st1.request()\n",
    "        arrive = env.now\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(18, 2))\n",
    "        st1.release(req)\n",
    "        #-------------------------------\n",
    "        req = st3.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(60, 5))\n",
    "        st3.release(req)\n",
    "        #-------------------------------\n",
    "        req = st4.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(10, 1))\n",
    "        response2.append(env.now - arrive)\n",
    "        st4.release(req)\n",
    "        #-------------------------------\n",
    "        \n",
    "    elif job_type == 3:\n",
    "        #-------------------------------\n",
    "        req = st2.request()\n",
    "        arrive = env.now\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(20, 2))\n",
    "        st2.release(req)\n",
    "        #-------------------------------\n",
    "        req = st4.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(10, 1))\n",
    "        st4.release(req)\n",
    "        #-------------------------------\n",
    "        req = st3.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(50, 8))\n",
    "        response3.append(env.now - arrive)\n",
    "        st3.release(req)\n",
    "        #-------------------------------\n",
    "                          \n",
    "                          \n",
    "    elif job_type == 4:\n",
    "        #-------------------------------\n",
    "        req = st1.request()\n",
    "        arrive = env.now\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(30, 5))\n",
    "        st1.release(req)\n",
    "        #-------------------------------\n",
    "        req = st4.request()\n",
    "        yield req\n",
    "        yield env.timeout(np.random.normal(15, 2))\n",
    "        response4.append(env.now - arrive)\n",
    "        st4.release(req)\n",
    "        #-------------------------------\n",
    "        \n",
    "def setup(env):\n",
    "    env.process(initilization(env))\n",
    "    while True:\n",
    "        interarrival = np.random.exponential(scale=4)\n",
    "        yield env.timeout(interarrival)\n",
    "        env.process(job_process(env))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6c4f32fa",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'MonitoredResource' object has no attribute 'data'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-95904648683b>\u001b[0m in \u001b[0;36mjob_process\u001b[1;34m(env)\u001b[0m\n\u001b[0;32m     13\u001b[0m         \u001b[1;31m#-------------------------------\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 14\u001b[1;33m         \u001b[0mreq\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mst1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrequest\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     15\u001b[0m         \u001b[0marrive\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-2-d4f38c5f961b>\u001b[0m in \u001b[0;36mrequest\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m     20\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 21\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_env\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcount\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     22\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'MonitoredResource' object has no attribute 'data'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-4-2f6d9161da0c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     23\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     24\u001b[0m     \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msetup\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 25\u001b[1;33m     \u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0muntil\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     26\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     27\u001b[0m     \u001b[0mst1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mst1\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\simpy\\core.py\u001b[0m in \u001b[0;36mrun\u001b[1;34m(self, until)\u001b[0m\n\u001b[0;32m    252\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    253\u001b[0m             \u001b[1;32mwhile\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 254\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    255\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mStopSimulation\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mexc\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    256\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mexc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m  \u001b[1;31m# == until.value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\simpy\\core.py\u001b[0m in \u001b[0;36mstep\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    204\u001b[0m             \u001b[0mexc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mevent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0mevent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m             \u001b[0mexc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__cause__\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mevent\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_value\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 206\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    207\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    208\u001b[0m     def run(\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'MonitoredResource' object has no attribute 'data'"
     ]
    }
   ],
   "source": [
    "CI_S1 = []\n",
    "CI_S2 = []\n",
    "CI_S3 = []\n",
    "CI_S4 = []\n",
    "CI_J1 = []\n",
    "CI_J2 = []\n",
    "CI_J3 = []\n",
    "CI_J4 = []\n",
    "\n",
    "for j in range(344, 364):\n",
    "    response1 = []\n",
    "    response2 = []\n",
    "    response3 = []\n",
    "    response4 = []\n",
    "    \n",
    "    seed = j\n",
    "    np.random.seed(j)\n",
    "    env = sp.Environment()\n",
    "    st1 = MonitoredResource(env, capacity=8)\n",
    "    st2 = MonitoredResource(env, capacity=8)\n",
    "    st3 = MonitoredResource(env, capacity=20)\n",
    "    st4 = MonitoredResource(env, capacity=7)\n",
    "\n",
    "    env.process(setup(env))\n",
    "    env.run(until=1000)\n",
    "\n",
    "    st1.data.append((1000, st1.count))\n",
    "    st2.data.append((1000, st2.count))\n",
    "    st3.data.append((1000, st3.count))\n",
    "    st4.data.append((1000, st4.count))\n",
    "\n",
    "    uti1 = 0\n",
    "    for i in range(len(st1.data) - 1):\n",
    "        uti1 += (st1.data[i + 1][0] - st1.data[i][0]) * st1.data[i][1]\n",
    "    uti1 /= (800*8)\n",
    "    \n",
    "    uti2 = 0\n",
    "    for i in range(len(st2.data) - 1):\n",
    "        uti2 += (st2.data[i + 1][0] - st2.data[i][0]) * st2.data[i][1]\n",
    "    uti2 /= (800*8)\n",
    "    \n",
    "    uti3 = 0\n",
    "    for i in range(len(st3.data) - 1):\n",
    "        uti3 += (st3.data[i + 1][0] - st3.data[i][0]) * st3.data[i][1]\n",
    "    uti3 /= (800*20)\n",
    "    \n",
    "    uti4 = 0\n",
    "    for i in range(len(st4.data) - 1):\n",
    "        uti4 += (st4.data[i + 1][0] - st4.data[i][0]) * st4.data[i][1]\n",
    "    uti4 /= (800*7)\n",
    "    \n",
    "    CI_S1.append(uti1)\n",
    "    CI_S2.append(uti2)\n",
    "    CI_S3.append(uti3)\n",
    "    CI_S4.append(uti4)\n",
    "    CI_J1.append(np.mean(response1))\n",
    "    CI_J2.append(np.mean(response2))\n",
    "    CI_J3.append(np.mean(response3))\n",
    "    CI_J4.append(np.mean(response4))\n",
    "    \n",
    "    print(\"Performing simulation with seed \" + str(j))\n",
    "    print(\"Average worker utilization of Station#1 = \" + str('{:.4f}'.format(uti1)))\n",
    "    print(\"Average worker utilization of Station#2 = \" + str('{:.4f}'.format(uti2)))\n",
    "    print(\"Average worker utilization of Station#3 = \" + str('{:.4f}'.format(uti3)))\n",
    "    print(\"Average worker utilization of Station#4 = \" + str('{:.4f}'.format(uti4)))\n",
    "    print(\"Mean total response time of Job type#1 = \" + str('{:.4f}'.format(np.mean(response1))))\n",
    "    print(\"Mean total response time of Job type#2 = \" + str('{:.4f}'.format(np.mean(response2))))\n",
    "    print(\"Mean total response time of Job type#3 = \" + str('{:.4f}'.format(np.mean(response3))))\n",
    "    print(\"Mean total response time of Job type#4 = \" + str('{:.4f}'.format(np.mean(response4))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0727e89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
